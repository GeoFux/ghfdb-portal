FROM geoluminate/geoluminate:latest as base

# # ====================== BUILD STAGE ============================
# builds python wheels for all dependencies and sub-dependences listed in pyproject.toml
# doing this allows us to copy wheels to the run-stage and install dependencies directly, resulting in faster builds
# and smaller final images.
FROM base as build-stage

ENV POETRY_VERSION=1.3.1

# install necessary system dependencies
RUN apt-get update && apt-get install --no-install-recommends -y \
  # psycopg2 dependencies
  libpq-dev \
  # dependencies for building Python packages
  build-essential \
  # in REAL production, we would not need git, but for now, we need it to install some un-released packages.
  # install git
  git && \
  # install poetry for dependencies
  pip install "poetry==$POETRY_VERSION" && \
  # dependencies for building Python packages
  # cleaning up unused files
  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false  && \
  rm -rf /var/lib/apt/lists/*

COPY pyproject.toml poetry.lock ./

# Create Python Dependency and Sub-Dependency Wheels.
RUN poetry export --without-hashes -o requirements.txt --with dev && \
  pip wheel --wheel-dir /usr/src/app/wheels \
  -r requirements.txt


# # ====================== RUN STAGE ============================
FROM base as run-stage

RUN apt-get update && \
  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
  && rm -rf /var/lib/apt/lists/*

# copy python dependency wheels from python-build-stage
COPY --from=build-stage /usr/src/app/wheels  /wheels/

# use wheels to install python dependencies, then remove the wheels directory
RUN pip install --no-cache-dir \
                --no-index \
                --find-links=/wheels/ /wheels/* \
  && rm -rf /wheels/


# copy application code to WORKDIR
COPY --chown=django:django . /app

# make django owner of the WORKDIR directory as well.
RUN chown -R django:django /app

# compile messages for all locales
# NOTE: a locale directory must be present, or this will fail with some vague error about DJANGO_SETTINGS_MODULE not being set
RUN DATABASE_URL="" \
  CELERY_BROKER_URL="" \
  DJANGO_SETTINGS_MODULE="config.development" \
  python manage.py compilemessages

ENTRYPOINT ["entrypoint"]
