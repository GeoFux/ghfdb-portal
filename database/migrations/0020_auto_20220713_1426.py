# Generated by Django 3.2.14 on 2022-07-13 12:26

import core.fields
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('database', '0019_auto_20220713_1422'),
    ]

    operations = [
        migrations.AlterField(
            model_name='historicalinterval',
            name='T_corr_bot',
            field=models.CharField(blank=True, choices=[('hp', 'Horner Plot'), ('csm', 'Cylinder source method'), ('lsm', 'Line source explosion method'), ('im', 'Inverse numerical modelling'), ('other', 'Other'), ('not corrected', 'Not corrected'), ('unspecified', 'Unspecified')], help_text='Approach used at the bottom of the heat flow interval to correct the measured temperature for drilling perturbations.', max_length=13, null=True, verbose_name='correction method (bottom)'),
        ),
        migrations.AlterField(
            model_name='historicalinterval',
            name='T_corr_top',
            field=models.CharField(blank=True, choices=[('hp', 'Horner Plot'), ('csm', 'Cylinder source method'), ('lsm', 'Line source explosion method'), ('im', 'Inverse numerical modelling'), ('other', 'Other'), ('not corrected', 'Not corrected'), ('unspecified', 'Unspecified')], help_text='Approach used at the top of the heat flow interval to correct the measured temperature for drilling perturbations.', max_length=13, null=True, verbose_name='correction method (top)'),
        ),
        migrations.AlterField(
            model_name='historicalinterval',
            name='T_grad_mean_meas',
            field=models.FloatField(blank=True, help_text='measured temperature gradient for the heat-flow determination interval.', null=True, verbose_name='measured gradient (K/km)'),
        ),
        migrations.AlterField(
            model_name='historicalinterval',
            name='T_method_bot',
            field=models.CharField(blank=True, choices=[('bht', 'Bottom hole temperature (uncorrected)'), ('cbht', 'Bottom hole temperature (corrected)'), ('dst', 'Drill stem test'), ('pt100', 'Pt-100 probe'), ('pt1000', 'Pt-1000 probe'), ('log', 'Continuous temperature log'), ('clog', 'Corrected temperature log'), ('dts', 'Distributed temperature sensing'), ('cpd', 'Cure point depth estimate'), ('xen', 'Xenlith'), ('gtm', 'Geothermometry'), ('bsr', 'Bottom-simulating seismic reflector'), ('apct/set-2', 'Ocean drilling temperature tool'), ('sur', 'Surface temperature')], help_text='Method used to determine temperature at the bottom of the heat flow interval.', max_length=10, null=True, verbose_name='temperature method (bottom)'),
        ),
        migrations.AlterField(
            model_name='historicalinterval',
            name='T_method_top',
            field=models.CharField(blank=True, choices=[('bht', 'Bottom hole temperature (uncorrected)'), ('cbht', 'Bottom hole temperature (corrected)'), ('dst', 'Drill stem test'), ('pt100', 'Pt-100 probe'), ('pt1000', 'Pt-1000 probe'), ('log', 'Continuous temperature log'), ('clog', 'Corrected temperature log'), ('dts', 'Distributed temperature sensing'), ('cpd', 'Cure point depth estimate'), ('xen', 'Xenlith'), ('gtm', 'Geothermometry'), ('bsr', 'Bottom-simulating seismic reflector'), ('apct/set-2', 'Ocean drilling temperature tool'), ('sur', 'Surface temperature')], help_text='Method used to determine temperature at the top of the heat flow interval.', max_length=10, null=True, verbose_name='temperature method (top)'),
        ),
        migrations.AlterField(
            model_name='historicalinterval',
            name='childcomp',
            field=models.BooleanField(blank=True, default=None, help_text='Specifies whether the child entry is used for computation of representative location heat flow values at the parent level or not.', null=True, verbose_name='Is relevant child?'),
        ),
        migrations.AlterField(
            model_name='historicalinterval',
            name='q_acq',
            field=models.DateField(blank=True, help_text='Year of acquisition of the heat-flow data (may differ from publication year)', null=True, verbose_name='date of acquisition (YYYY-MM)'),
        ),
        migrations.AlterField(
            model_name='historicalinterval',
            name='q_method',
            field=models.CharField(blank=True, choices=[('fourier', "Fourier's Law"), ('product', 'Product method'), ('interval', 'Interval method'), ('bullard', 'Bullard'), ('bootsrap', 'Bootstrap')], help_text='Principal method of heat-flow density calculation from temperature and thermal conductivity data', max_length=8, null=True, verbose_name='method'),
        ),
        migrations.AlterField(
            model_name='historicalinterval',
            name='tc_mean',
            field=core.fields.RangeField(blank=True, help_text='Mean conductivity in the vertical direction representative for the heat-flow determination interval. Value should reflect true in-situ conditions for the interval.', null=True, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='Mean conductivity (W/mK)'),
        ),
        migrations.AlterField(
            model_name='historicalinterval',
            name='tc_pTcond',
            field=models.CharField(blank=True, choices=[('unrecorded ambient pT conditions', 'Unrecorded ambient pT conditions'), ('Recorded ambient pT conditions', 'Recorded ambient pT conditions'), ('replicated in-situ (p)', 'Replicated in-situ (p)'), ('replicated in-situ (t)', 'Replicated in-situ (T)'), ('replicated in-situ(pt)', 'Replicated in-situ (pT)'), ('actual in-situ (pt) conditions', 'Actual in-situ (pT) conditions')], help_text='Pressure and temperature conditions under which the mean thermal conductivity for the given interval was determined. "Recorded" - determined under true conditions at target depths (e.g. sensing in boreholes), "Replicated" - determined in a laboratory under replicated in-situ conditions, "Actual" - under conditions at the respective depth of the heat-flow interval', max_length=100, null=True, verbose_name='pT conditions'),
        ),
        migrations.AlterField(
            model_name='historicalinterval',
            name='tc_satur',
            field=models.CharField(blank=True, help_text='Saturation state of the rock sample studied for thermal conductivity', max_length=100, null=True, verbose_name='saturation state'),
        ),
        migrations.AlterField(
            model_name='historicalinterval',
            name='tc_source',
            field=models.CharField(blank=True, choices=[('outcrop samples', 'Outcrop samples'), ('core samples', 'Core samples'), ('cutting samples', 'Cutting samples'), ('mineral computation', 'Mineral computation'), ('well log interpretation', 'Well log interpretation'), ('core-log integration', 'Core-log integration'), ('in-situ probe', 'In-situ probe'), ('other', 'Other (specify in comments field)'), ('unspecified', 'Unspecified')], help_text='Nature of the samples from which the mean thermal conductivity was determined', max_length=23, null=True, verbose_name='source'),
        ),
        migrations.AlterField(
            model_name='historicalinterval',
            name='tc_strategy',
            field=models.CharField(blank=True, help_text='Strategy employed to estimate thermal conductivity over the given interval', max_length=255, null=True, verbose_name='averaging methodoloy'),
        ),
        migrations.AlterField(
            model_name='interval',
            name='T_corr_bot',
            field=models.CharField(blank=True, choices=[('hp', 'Horner Plot'), ('csm', 'Cylinder source method'), ('lsm', 'Line source explosion method'), ('im', 'Inverse numerical modelling'), ('other', 'Other'), ('not corrected', 'Not corrected'), ('unspecified', 'Unspecified')], help_text='Approach used at the bottom of the heat flow interval to correct the measured temperature for drilling perturbations.', max_length=13, null=True, verbose_name='correction method (bottom)'),
        ),
        migrations.AlterField(
            model_name='interval',
            name='T_corr_top',
            field=models.CharField(blank=True, choices=[('hp', 'Horner Plot'), ('csm', 'Cylinder source method'), ('lsm', 'Line source explosion method'), ('im', 'Inverse numerical modelling'), ('other', 'Other'), ('not corrected', 'Not corrected'), ('unspecified', 'Unspecified')], help_text='Approach used at the top of the heat flow interval to correct the measured temperature for drilling perturbations.', max_length=13, null=True, verbose_name='correction method (top)'),
        ),
        migrations.AlterField(
            model_name='interval',
            name='T_grad_mean_meas',
            field=models.FloatField(blank=True, help_text='measured temperature gradient for the heat-flow determination interval.', null=True, verbose_name='measured gradient (K/km)'),
        ),
        migrations.AlterField(
            model_name='interval',
            name='T_method_bot',
            field=models.CharField(blank=True, choices=[('bht', 'Bottom hole temperature (uncorrected)'), ('cbht', 'Bottom hole temperature (corrected)'), ('dst', 'Drill stem test'), ('pt100', 'Pt-100 probe'), ('pt1000', 'Pt-1000 probe'), ('log', 'Continuous temperature log'), ('clog', 'Corrected temperature log'), ('dts', 'Distributed temperature sensing'), ('cpd', 'Cure point depth estimate'), ('xen', 'Xenlith'), ('gtm', 'Geothermometry'), ('bsr', 'Bottom-simulating seismic reflector'), ('apct/set-2', 'Ocean drilling temperature tool'), ('sur', 'Surface temperature')], help_text='Method used to determine temperature at the bottom of the heat flow interval.', max_length=10, null=True, verbose_name='temperature method (bottom)'),
        ),
        migrations.AlterField(
            model_name='interval',
            name='T_method_top',
            field=models.CharField(blank=True, choices=[('bht', 'Bottom hole temperature (uncorrected)'), ('cbht', 'Bottom hole temperature (corrected)'), ('dst', 'Drill stem test'), ('pt100', 'Pt-100 probe'), ('pt1000', 'Pt-1000 probe'), ('log', 'Continuous temperature log'), ('clog', 'Corrected temperature log'), ('dts', 'Distributed temperature sensing'), ('cpd', 'Cure point depth estimate'), ('xen', 'Xenlith'), ('gtm', 'Geothermometry'), ('bsr', 'Bottom-simulating seismic reflector'), ('apct/set-2', 'Ocean drilling temperature tool'), ('sur', 'Surface temperature')], help_text='Method used to determine temperature at the top of the heat flow interval.', max_length=10, null=True, verbose_name='temperature method (top)'),
        ),
        migrations.AlterField(
            model_name='interval',
            name='childcomp',
            field=models.BooleanField(blank=True, default=None, help_text='Specifies whether the child entry is used for computation of representative location heat flow values at the parent level or not.', null=True, verbose_name='Is relevant child?'),
        ),
        migrations.AlterField(
            model_name='interval',
            name='q_acq',
            field=models.DateField(blank=True, help_text='Year of acquisition of the heat-flow data (may differ from publication year)', null=True, verbose_name='date of acquisition (YYYY-MM)'),
        ),
        migrations.AlterField(
            model_name='interval',
            name='q_method',
            field=models.CharField(blank=True, choices=[('fourier', "Fourier's Law"), ('product', 'Product method'), ('interval', 'Interval method'), ('bullard', 'Bullard'), ('bootsrap', 'Bootstrap')], help_text='Principal method of heat-flow density calculation from temperature and thermal conductivity data', max_length=8, null=True, verbose_name='method'),
        ),
        migrations.AlterField(
            model_name='interval',
            name='tc_mean',
            field=core.fields.RangeField(blank=True, help_text='Mean conductivity in the vertical direction representative for the heat-flow determination interval. Value should reflect true in-situ conditions for the interval.', null=True, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='Mean conductivity (W/mK)'),
        ),
        migrations.AlterField(
            model_name='interval',
            name='tc_pTcond',
            field=models.CharField(blank=True, choices=[('unrecorded ambient pT conditions', 'Unrecorded ambient pT conditions'), ('Recorded ambient pT conditions', 'Recorded ambient pT conditions'), ('replicated in-situ (p)', 'Replicated in-situ (p)'), ('replicated in-situ (t)', 'Replicated in-situ (T)'), ('replicated in-situ(pt)', 'Replicated in-situ (pT)'), ('actual in-situ (pt) conditions', 'Actual in-situ (pT) conditions')], help_text='Pressure and temperature conditions under which the mean thermal conductivity for the given interval was determined. "Recorded" - determined under true conditions at target depths (e.g. sensing in boreholes), "Replicated" - determined in a laboratory under replicated in-situ conditions, "Actual" - under conditions at the respective depth of the heat-flow interval', max_length=100, null=True, verbose_name='pT conditions'),
        ),
        migrations.AlterField(
            model_name='interval',
            name='tc_satur',
            field=models.CharField(blank=True, help_text='Saturation state of the rock sample studied for thermal conductivity', max_length=100, null=True, verbose_name='saturation state'),
        ),
        migrations.AlterField(
            model_name='interval',
            name='tc_source',
            field=models.CharField(blank=True, choices=[('outcrop samples', 'Outcrop samples'), ('core samples', 'Core samples'), ('cutting samples', 'Cutting samples'), ('mineral computation', 'Mineral computation'), ('well log interpretation', 'Well log interpretation'), ('core-log integration', 'Core-log integration'), ('in-situ probe', 'In-situ probe'), ('other', 'Other (specify in comments field)'), ('unspecified', 'Unspecified')], help_text='Nature of the samples from which the mean thermal conductivity was determined', max_length=23, null=True, verbose_name='source'),
        ),
        migrations.AlterField(
            model_name='interval',
            name='tc_strategy',
            field=models.CharField(blank=True, help_text='Strategy employed to estimate thermal conductivity over the given interval', max_length=255, null=True, verbose_name='averaging methodoloy'),
        ),
    ]
