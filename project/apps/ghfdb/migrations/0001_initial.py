# Generated by Django 3.2.18 on 2023-03-23 15:36

import controlled_vocabulary.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import geoscience.fields
import quantityfield.fields
import shortuuid.django_fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('geoscience', '0002_alter_earthmaterial_options'),
        ('literature', '0002_alter_literature_authors'),
        ('geoluminate', '0007_alter_geoluminate_literature_and_more'),
        ('controlled_vocabulary', '0005_auto_20230323_1534'),
    ]

    operations = [
        migrations.CreateModel(
            name='HeatFlow',
            fields=[
                ('geoluminate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='sites', serialize=False, to='geoluminate.geoluminate')),
                ('q', quantityfield.fields.QuantityField(base_units='mW / m^2', help_text='site heat flow value', unit_choices=['mW / m^2'], validators=[django.core.validators.MinValueValidator(-1000000), django.core.validators.MaxValueValidator(1000000)], verbose_name='heat flow')),
                ('q_unc', quantityfield.fields.QuantityField(base_units='mW / m^2', blank=True, help_text='uncertainty standard deviation of the reported heat-flow value as estimated by an error propagation from uncertainty in thermal conductivity and temperature gradient (corrected preferred over measured gradient).', null=True, unit_choices=['mW / m^2'], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)], verbose_name='heat flow uncertainty')),
                ('q_date_acq', models.DateField(help_text='Year of acquisition of the heat-flow data in the form "YYYY-MM" (may differ from publication year)', null=True, verbose_name='date acquired')),
                ('borehole_depth', quantityfield.fields.QuantityField(base_units='m', blank=True, help_text='Specification of the total drilling depth below ground surface level.', null=True, unit_choices=['m'], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15000)], verbose_name='total borehole depth')),
                ('expedition', models.CharField(help_text='Specify the expedition, cruise, platform or research vessel where the marine heat flow survey was conducted. Only applies to marine probe sensing and drillings. Examples: Expedition cruise number OR R/V Ship OR D/V Platform', max_length=255, null=True, verbose_name='expedition/platform/ship')),
                ('water_temp', quantityfield.fields.QuantityField(base_units='°C', blank=True, help_text='Seafloor temperature where heat-flow measurements were taken.', null=True, unit_choices=['°C', 'K'], verbose_name='bottom water temperature')),
                ('environment', controlled_vocabulary.models.ControlledTermField(blank=True, help_text='Describes the general geographical setting of the heat-flow site (not the applied methodology).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='controlled_vocabulary.controlledterm', verbose_name='basic geographical environment', vocabularies='environment')),
                ('explo_method', controlled_vocabulary.models.ControlledTermField(blank=True, help_text='Specification of the general means by which the rock was accessed by temperature sensors for the respective data entry.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='controlled_vocabulary.controlledterm', verbose_name='exploration method', vocabularies='explo_method')),
                ('explo_purpose', controlled_vocabulary.models.ControlledTermField(blank=True, help_text='Main purpose of the original excavation providing access for the temperature sensors.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='controlled_vocabulary.controlledterm', verbose_name='exploration purpose', vocabularies='explo_purpose')),
            ],
            options={
                'verbose_name': 'Heat Flow',
                'verbose_name_plural': 'Heat Flow (Parent)',
                'db_table': 'global_heat_flow',
                'default_related_name': 'sites',
            },
            bases=('geoluminate.geoluminate',),
        ),
        migrations.CreateModel(
            name='Interval',
            fields=[
                ('id', shortuuid.django_fields.ShortUUIDField(alphabet='23456789ABCDEFGHJKLMNPQRSTUVWXYZ', blank=True, length=8, max_length=15, prefix='GHFI-', primary_key=True, serialize=False, verbose_name='ID')),
                ('historic_id', models.PositiveIntegerField(blank=True, help_text='This is the numeric identifier used in old forms of the GHFDB to identify measurements', null=True, verbose_name='Historic ID')),
                ('qc', quantityfield.fields.QuantityField(base_units='mW / m^2', help_text='child heat flow value', unit_choices=['mW / m^2'], validators=[django.core.validators.MinValueValidator(-1000000), django.core.validators.MaxValueValidator(1000000)], verbose_name='heat flow')),
                ('qc_unc', quantityfield.fields.QuantityField(base_units='mW / m^2', blank=True, help_text='uncertainty standard deviation of the reported heat-flow value as estimated by an error propagation from uncertainty in thermal conductivity and temperature gradient (corrected preferred over measured gradient).', null=True, unit_choices=['mW / m^2'], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)], verbose_name='heat flow uncertainty')),
                ('q_top', quantityfield.fields.QuantityField(base_units='m', blank=True, help_text='Specifies the true vertical depth at the top of the heat-flow interval relative to land surface/ocean bottom.', null=True, unit_choices=['m'], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)], verbose_name='interval top')),
                ('q_bot', quantityfield.fields.QuantityField(base_units='m', blank=True, help_text='Describes the true vertical depth of the bottom end of the heat-flow determination interval relative to the land surface/ocean bottom.', null=True, unit_choices=['m'], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)], verbose_name='interval bottom')),
                ('hf_pen', quantityfield.fields.QuantityField(base_units='m', blank=True, help_text='Depth of penetration of marine probe into the sediment.', null=True, unit_choices=['m'], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='penetration depth')),
                ('hf_probeL', quantityfield.fields.QuantityField(base_units='m', blank=True, help_text='length of the marine probe.', null=True, unit_choices=['m'], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='probe length')),
                ('probe_tilt', quantityfield.fields.QuantityField(base_units='degree', blank=True, help_text='Tilt of the marine probe.', null=True, unit_choices=['degree'], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(90)], verbose_name='tilt')),
                ('q_date_acq', models.DateField(blank=True, help_text='Year of acquisition of the heat-flow data (may differ from publication year)', null=True, verbose_name='date of acquisition (YYYY-MM)')),
                ('relevant_child', models.BooleanField(blank=True, default=None, help_text='Specify whether the child entry is used for computation of representative location heat flow values at the parent level or not.', null=True, verbose_name='Is relevant child?')),
                ('T_grad_mean', quantityfield.fields.QuantityField(base_units='K/km', blank=True, help_text='measured temperature gradient for the heat-flow determination interval.', null=True, unit_choices=['K/km'], verbose_name='measured gradient')),
                ('T_grad_uncertainty', quantityfield.fields.QuantityField(base_units='K/km', blank=True, help_text='uncertainty (standard deviation) of the measured temperature gradient estimated by error propagation from uncertainty in the top and bottom interval temperatures.', null=True, unit_choices=['K/km'], verbose_name='uncertainty')),
                ('T_grad_mean_cor', quantityfield.fields.QuantityField(base_units='K/km', blank=True, help_text='temperature gradient corrected for borehole and environmental effects. Correction method should be recorded in the relevant field.', null=True, unit_choices=['K/km'], verbose_name='corrected gradient')),
                ('T_grad_uncertainty_cor', quantityfield.fields.QuantityField(base_units='K/km', blank=True, help_text='uncertainty (standard deviation) of the corrected temperature gradient estimated by error propagation from uncertainty of the measured gradient and the applied correction approaches.', null=True, unit_choices=['K/km'], verbose_name='uncertainty')),
                ('T_shutin_top', quantityfield.fields.PositiveIntegerQuantityField(base_units='hour', blank=True, help_text='Time of measurement at the interval top in relation to the end of drilling/end of mud circulation. Positive values are measured after the drilling, 0 represents temperatures measured during the drilling.', null=True, unit_choices=['hour'], verbose_name='Shut-in time (top)')),
                ('T_shutin_bottom', quantityfield.fields.PositiveIntegerQuantityField(base_units='hour', blank=True, help_text='Time of measurement at the interval bottom in relation to the end of drilling/end of mud circulation. Positive values are measured after the drilling, 0 represents temperatures measured during the drilling.', null=True, unit_choices=['hour'], verbose_name='Shut-in time (bottom; hrs)')),
                ('T_count', models.PositiveSmallIntegerField(blank=True, help_text='Number of discrete temperature points (e.g. number of used BHT values, log values or thermistors used in probe sensing) confirming the mean temperature gradient. Not the repetition of one measurement at a certain depth.', null=True, verbose_name='number of temperature recordings')),
                ('tc_mean', quantityfield.fields.QuantityField(base_units='W/mK', blank=True, help_text='Mean conductivity in the vertical direction representative for the heat-flow determination interval. Value should reflect true in-situ conditions for the interval.', null=True, unit_choices=['W/mK'], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Mean conductivity')),
                ('tc_uncertainty', quantityfield.fields.QuantityField(base_units='W/mK', blank=True, help_text='Uncertainty of the mean thermal conductivity given as one-sigma standard deviation.', null=True, unit_choices=['W/mK'], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='uncertainty')),
                ('tc_method', models.CharField(blank=True, help_text='Method used to determine the mean thermal conductivity over the given interval', max_length=100, null=True, verbose_name='method')),
                ('tc_saturation', models.CharField(blank=True, help_text='Saturation state of the rock sample studied for thermal conductivity', max_length=100, null=True, verbose_name='saturation state')),
                ('tc_pT_function', models.CharField(blank=True, help_text='Technique or approach used to correct the measured thermal conductivity towards in-situ pT conditions', max_length=255, null=True, verbose_name='assumed pT function')),
                ('tc_strategy', models.CharField(blank=True, help_text='Strategy employed to estimate thermal conductivity over the given interval', max_length=255, null=True, verbose_name='averaging methodoloy')),
                ('tc_count', models.PositiveSmallIntegerField(blank=True, help_text='Number of discrete temperature points (e.g. number of used BHT values, log values or thermistors used in probe sensing) confirming the mean temperature gradient. Not the repetition of one measurement at a certain depth.', null=True, verbose_name='number of temperature recordings')),
                ('T_correction_bottom', controlled_vocabulary.models.ControlledTermField(blank=True, help_text='Approach used at the bottom of the heat flow interval to correct the measured temperature for drilling perturbations.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='controlled_vocabulary.controlledterm', verbose_name='correction method (bottom)', vocabularies='T_correction_method')),
                ('T_correction_top', controlled_vocabulary.models.ControlledTermField(blank=True, help_text='Approach used at the top of the heat flow interval to correct the measured temperature for drilling perturbations.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='controlled_vocabulary.controlledterm', verbose_name='correction method (top)', vocabularies='T_correction_method')),
                ('T_method_bottom', controlled_vocabulary.models.ControlledTermField(blank=True, help_text='Method used to determine temperature at the bottom of the heat flow interval.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='controlled_vocabulary.controlledterm', verbose_name='temperature method (bottom)', vocabularies='T_method')),
                ('T_method_top', controlled_vocabulary.models.ControlledTermField(blank=True, help_text='Method used to determine temperature at the top of the heat flow interval.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='controlled_vocabulary.controlledterm', verbose_name='temperature method (top)', vocabularies='T_method')),
            ],
            options={
                'verbose_name': 'Interval',
                'verbose_name_plural': 'Heat Flow (Child)',
                'db_table': 'heat_flow_interval',
                'ordering': ['site', 'relevant_child', 'q_top'],
                'default_related_name': 'intervals',
            },
        ),
        migrations.CreateModel(
            name='IntervalCorrectionThrough',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('applied', models.CharField(choices=[('yes', 'Yes'), ('no', 'No'), ('mentioned', 'Mentioned in-text but unclear if applied')], help_text='Has the correction been applied to this interval?', max_length=9, verbose_name='Applied?')),
                ('value', models.FloatField(blank=True, help_text='Value of the applied correction in (mW m^-2). Can be positive or negative.', null=True, verbose_name='value')),
                ('correction', controlled_vocabulary.models.ControlledTermField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='controlled_vocabulary.controlledterm', vocabularies='correction')),
                ('interval', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ghfdb.interval')),
            ],
            options={
                'verbose_name': 'correction',
                'verbose_name_plural': 'corrections',
            },
        ),
        migrations.AddField(
            model_name='interval',
            name='corrections',
            field=models.ManyToManyField(blank=True, related_name='intervals', through='ghfdb.IntervalCorrectionThrough', to='controlled_vocabulary.ControlledTerm', verbose_name='Applied Corrections'),
        ),
        migrations.AddField(
            model_name='interval',
            name='hf_probe',
            field=controlled_vocabulary.models.ControlledTermField(blank=True, help_text='Type of marine probe used for measurement.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='controlled_vocabulary.controlledterm', verbose_name='probe type', vocabularies='hf_probe'),
        ),
        migrations.AddField(
            model_name='interval',
            name='lithology',
            field=geoscience.fields.EarthMaterialOneToOne(blank=True, help_text='Dominant rock type/lithology within the interval of heat-flow determination using the British Geological Society Earth Material Class (rock classification) scheme.', limit_choices_to=geoscience.fields.limit_choices_to, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intervals', to='geoscience.earthmaterial', verbose_name='lithology'),
        ),
        migrations.AddField(
            model_name='interval',
            name='q_method',
            field=controlled_vocabulary.models.ControlledTermField(blank=True, help_text='Principal method of heat-flow density calculation from temperature and thermal conductivity data', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='controlled_vocabulary.controlledterm', verbose_name='method', vocabularies='q_method'),
        ),
        migrations.AddField(
            model_name='interval',
            name='q_tf_mech',
            field=controlled_vocabulary.models.ControlledTermField(blank=True, help_text='Specification of the predominant heat transfer mechanism relevant to the reported heat flow value.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='controlled_vocabulary.controlledterm', verbose_name='transfer mechanism', vocabularies='q_tf_mech'),
        ),
        migrations.AddField(
            model_name='interval',
            name='reference',
            field=models.ForeignKey(help_text='The publication or other reference from which the measurement was reported.', on_delete=django.db.models.deletion.CASCADE, related_name='intervals', to='literature.literature', verbose_name='reference'),
        ),
        migrations.AddField(
            model_name='interval',
            name='site',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intervals', to='ghfdb.heatflow', verbose_name='site'),
        ),
        migrations.AddField(
            model_name='interval',
            name='stratigraphy',
            field=geoscience.fields.GeologicTimeOneToOne(blank=True, help_text='Stratigraphic age of the depth range involved in the reported heat-flow determination based on the official geologic timescale of the International Commission on Stratigraphy.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intervals', to='geoscience.geologictime', verbose_name='ICS stratigraphy'),
        ),
        migrations.AddField(
            model_name='interval',
            name='tc_pT_conditions',
            field=controlled_vocabulary.models.ControlledTermField(blank=True, help_text='Pressure and temperature conditions under which the mean thermal conductivity for the given interval was determined. "Recorded" - determined under true conditions at target depths (e.g. sensing in boreholes), "Replicated" - determined in a laboratory under replicated in-situ conditions, "Actual" - under conditions at the respective depth of the heat-flow interval', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='controlled_vocabulary.controlledterm', verbose_name='pT conditions', vocabularies='tc_pT_conditions'),
        ),
        migrations.AddField(
            model_name='interval',
            name='tc_source',
            field=controlled_vocabulary.models.ControlledTermField(blank=True, help_text='Nature of the samples from which the mean thermal conductivity was determined', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='controlled_vocabulary.controlledterm', verbose_name='source', vocabularies='tc_source'),
        ),
    ]
