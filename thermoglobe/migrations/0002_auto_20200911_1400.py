# Generated by Django 3.1 on 2020-09-11 04:30

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('thermoglobe', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='publication',
            name='verified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verifications', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalpublication',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalpublication',
            name='verified_by',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='heatgeneration',
            name='reference',
            field=models.ForeignKey(blank=True, help_text='The publication or other reference from which the measurement was reported.', null=True, on_delete=django.db.models.deletion.CASCADE, to='thermoglobe.publication', verbose_name='reference'),
        ),
        migrations.AddField(
            model_name='heatgeneration',
            name='site',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='thermoglobe.site', verbose_name='site'),
        ),
        migrations.AddField(
            model_name='heatflow',
            name='global_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='declared_global', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='heatflow',
            name='reference',
            field=models.ForeignKey(blank=True, help_text='The publication or other reference from which the measurement was reported.', null=True, on_delete=django.db.models.deletion.CASCADE, to='thermoglobe.publication', verbose_name='reference'),
        ),
        migrations.AddField(
            model_name='heatflow',
            name='site',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='heat_flow', to='thermoglobe.site', verbose_name='site'),
        ),
        migrations.AddField(
            model_name='correction',
            name='heatflow',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='corrections', to='thermoglobe.heatflow'),
        ),
        migrations.AddField(
            model_name='conductivity',
            name='reference',
            field=models.ForeignKey(blank=True, help_text='The publication or other reference from which the measurement was reported.', null=True, on_delete=django.db.models.deletion.CASCADE, to='thermoglobe.publication', verbose_name='reference'),
        ),
        migrations.AddField(
            model_name='conductivity',
            name='site',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='thermoglobe.site', verbose_name='site'),
        ),
        migrations.AlterUniqueTogether(
            name='temperature',
            unique_together={('value', 'depth', 'site', 'reference')},
        ),
        migrations.AlterUniqueTogether(
            name='site',
            unique_together={('site_name', 'latitude', 'longitude')},
        ),
        migrations.AlterUniqueTogether(
            name='heatgeneration',
            unique_together={('value', 'depth', 'site', 'reference')},
        ),
        migrations.AlterUniqueTogether(
            name='conductivity',
            unique_together={('value', 'depth', 'site', 'reference')},
        ),
    ]
