# Generated by Django 3.2.13 on 2022-07-01 14:04

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import simple_history.models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('mapping', '0001_initial'),
        ('thermoglobe', '0007_delete_historicalsite'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalSite',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('site_name', models.CharField(help_text='The name given to the site.', max_length=200, null=True, verbose_name='site name')),
                ('latitude', models.FloatField(db_index=True, help_text='Latitude in decimal degrees', validators=[django.core.validators.MaxValueValidator(90), django.core.validators.MinValueValidator(-90)], verbose_name='latitude')),
                ('longitude', models.FloatField(db_index=True, help_text='Longitude in decimal degrees', validators=[django.core.validators.MaxValueValidator(180), django.core.validators.MinValueValidator(-180)], verbose_name='longitude')),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, srid=4326)),
                ('elevation', models.FloatField(blank=True, help_text='Site elevation', null=True, verbose_name='elevation (m)')),
                ('well_depth', models.FloatField(blank=True, help_text='Total depth of the hole in metres.', null=True, validators=[django.core.validators.MaxValueValidator(12500), django.core.validators.MinValueValidator(0)], verbose_name='well depth (m)')),
                ('cruise', models.CharField(blank=True, help_text='For oceanic measurements - the name of the cruise on which the measurements were taken.', max_length=150, null=True, verbose_name='cruise name')),
                ('seafloor_age', models.FloatField(blank=True, help_text='Age of the sea floor', null=True, validators=[django.core.validators.MaxValueValidator(220), django.core.validators.MinValueValidator(0)], verbose_name='sea floor age')),
                ('sediment_thickness', models.FloatField(blank=True, help_text='Sediment thickness at the site.', null=True, verbose_name='sediment thickness')),
                ('sediment_thickness_type', models.CharField(blank=True, help_text='How sediment thickness was determined.', max_length=250, null=True, verbose_name='sediment thickness')),
                ('seamount_distance', models.FloatField(blank=True, help_text='Distance in Km to the nearest seamount.', null=True, verbose_name='seamount distance')),
                ('outcrop_distance', models.FloatField(blank=True, help_text='Distance in Km to the nearest outcrop.', null=True, verbose_name='outcrop distance')),
                ('crustal_thickness', models.FloatField(blank=True, help_text='Calculated crustal thickness at the site.', null=True, verbose_name='crustal thickness')),
                ('bottom_water_temp', models.FloatField(blank=True, help_text='Temperature at the bottom of the water column.', null=True, verbose_name='bottom_water_temperature')),
                ('year_drilled', models.IntegerField(blank=True, null=True, verbose_name='year drilled')),
                ('description', models.TextField(blank=True, null=True, verbose_name='site description')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=['site_name', 'latitude', 'longitude'])),
                ('date_added', models.DateTimeField(blank=True, editable=False, verbose_name='date added')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('continent', models.ForeignKey(blank=True, db_constraint=False, help_text='Continent land boundaries', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mapping.continent', verbose_name='continent')),
                ('country', models.ForeignKey(blank=True, db_constraint=False, help_text='Country land boundaries', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mapping.country', verbose_name='country')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('ocean', models.ForeignKey(blank=True, db_constraint=False, help_text='Global oceans and seas', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mapping.ocean', verbose_name='ocean')),
                ('plate', models.ForeignKey(blank=True, db_constraint=False, help_text='tectonic plate', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mapping.plate', verbose_name='plate')),
                ('political', models.ForeignKey(blank=True, db_constraint=False, help_text='Countries inclusive of exclusive marine economic zones', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mapping.political', verbose_name='political region')),
                ('province', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mapping.province', verbose_name='geological province')),
            ],
            options={
                'verbose_name': 'historical site',
                'verbose_name_plural': 'historical sites',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
