# Generated by Django 3.1 on 2020-09-11 04:30

import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django_extensions.db.fields
import simple_history.models
import sortedm2m.fields
import thermoglobe.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('mapping', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=100)),
                ('first_name', models.CharField(blank=True, max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=['last_name', 'first_name', 'middle_name'])),
            ],
            options={
                'db_table': 'authors',
                'ordering': ['last_name', 'first_name', 'middle_name'],
            },
        ),
        migrations.CreateModel(
            name='Conductivity',
            fields=[
                ('comment', models.TextField(blank=True, help_text='Information supplied with the measurement either by the original author/researcher or the compiler.', null=True, verbose_name='comment')),
                ('source', models.CharField(blank=True, max_length=50, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sample_name', models.CharField(blank=True, help_text='The reported name of the sample if applicable.', max_length=200, verbose_name='sample name')),
                ('method', models.CharField(blank=True, help_text='The method used to obtain the reported value.', max_length=200, verbose_name='method')),
                ('depth', models.FloatField(blank=True, help_text='The depth at which the measurement was taken (if applicable).', null=True, verbose_name='depth')),
                ('rock_group', models.CharField(blank=True, choices=[('M', 'metamorphic'), ('I', 'igneous'), ('S', 'sedimentary'), ('MI', 'meta-igneous'), ('MS', 'meta-sedimentary')], help_text='The encompassing rock group of the sample.', max_length=2, null=True, verbose_name='rock group')),
                ('rock_origin', models.CharField(blank=True, choices=[('P', 'plutonic'), ('V', 'volcanic')], help_text='The geological origin of the sample.', max_length=2, null=True, verbose_name='rock origin')),
                ('rock_type', models.CharField(blank=True, help_text='The reported rock type.', max_length=100, null=True, verbose_name='rock type')),
                ('age', models.FloatField(blank=True, help_text='The reported age of the sample.', null=True, verbose_name='age')),
                ('age_type', models.CharField(blank=True, help_text='The type of age given.', max_length=200, null=True, verbose_name='age type')),
                ('value', models.FloatField(help_text='The reported value of the sample.', verbose_name='thermal conductivity [W m<sup>-1</sup> K<sup>-1</sup>]')),
                ('uncertainty', models.FloatField(blank=True, help_text='The uncertainty on the reported value.', null=True, verbose_name='uncertainty [W m<sup>-1</sup> K<sup>-1</sup>]')),
                ('orientation', models.FloatField(blank=True, help_text='The angle relative to the foliation or bedding where 0 is along foliation and 90 is perpendicular to foliation. Values can be a floating point number anywhere between 0 and 90.', null=True, validators=[django.core.validators.MaxValueValidator(90), django.core.validators.MinValueValidator(0)], verbose_name='orientation')),
            ],
            options={
                'verbose_name': 'thermal conductivity',
                'verbose_name_plural': 'thermal conductivity',
                'db_table': 'thermal_conductivity',
            },
        ),
        migrations.CreateModel(
            name='Correction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('climate_flag', models.BooleanField(default=None, null=True, verbose_name='climate corrected')),
                ('climate', models.FloatField(blank=True, help_text='Value of a climatic correction applied to the associated heat flow and thermal gradient estimates.', null=True, verbose_name='value')),
                ('topographic_flag', models.BooleanField(default=None, null=True, verbose_name='topographic corrected')),
                ('topographic', models.FloatField(blank=True, help_text='Value of a topographic correction applied to the associated heat flow and thermal gradient estimates.', null=True, verbose_name='value')),
                ('refraction_flag', models.BooleanField(default=None, null=True, verbose_name='refraction corrected')),
                ('refraction', models.FloatField(blank=True, help_text='Value of a refraction correction applied to the associated heat flow and thermal gradient estimates.', null=True, verbose_name='value')),
                ('sed_erosion_flag', models.BooleanField(default=None, null=True, verbose_name='sedimentation corrected')),
                ('sed_erosion', models.FloatField(blank=True, help_text='Value of a sedimentation correction applied to the associated heat flow and thermal gradient estimates.', null=True, verbose_name='value')),
                ('fluid_flag', models.BooleanField(default=None, null=True, verbose_name='fluid corrected')),
                ('fluid', models.FloatField(blank=True, help_text='Value of a fluid correction applied to the associated heat flow and thermal gradient estimates.', null=True, verbose_name='value')),
                ('bottom_water_variation_flag', models.BooleanField(default=None, null=True, verbose_name='BWV corrected')),
                ('bottom_water_variation', models.FloatField(blank=True, help_text='Value of a bottom water variation correction applied to the associated heat flow and thermal gradient estimates.', null=True, verbose_name='value')),
                ('compaction_flag', models.BooleanField(default=None, null=True, verbose_name='compaction corrected')),
                ('compaction', models.FloatField(blank=True, help_text='Value of a compaction correction applied to the associated heat flow and thermal gradient estimates.', null=True, verbose_name='value')),
                ('other_flag', models.BooleanField(default=None, null=True, verbose_name='other')),
                ('other_type', models.CharField(blank=True, help_text='Specifies the type of correction if the type does not belong to one of the other categories.', max_length=100, null=True, verbose_name='type of correction')),
                ('other', models.FloatField(blank=True, help_text='Value of any other correction applied to the associated heat flow and thermal gradient estimates.', null=True, verbose_name='value')),
            ],
            options={
                'db_table': 'correction',
            },
        ),
        migrations.CreateModel(
            name='HeatFlow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('comment', models.TextField(blank=True, help_text='Information supplied with the measurement either by the original author/researcher or the compiler.', null=True, verbose_name='comment')),
                ('source', models.CharField(blank=True, max_length=50, null=True)),
                ('reliability', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('R', 'R'), ('Z', 'Z')], help_text='Heat flow reliability code', max_length=1, null=True, verbose_name='heat flow reliability')),
                ('tilt', models.FloatField(blank=True, help_text='Angle between vertical and the orientation of the probe.', null=True, validators=[django.core.validators.MaxValueValidator(90), django.core.validators.MinValueValidator(0)], verbose_name='probe tilt')),
                ('depth_min', models.FloatField(blank=True, help_text='Minimum depth of the measurement interval.', null=True, validators=[django.core.validators.MaxValueValidator(12500, 'Maximum depth may not exceed 12,500m.'), django.core.validators.MinValueValidator(0, 'Depth cannot be less than 0m.')], verbose_name='minimum depth')),
                ('depth_max', models.FloatField(blank=True, help_text='Maximum depth of the measurement interval.', null=True, validators=[django.core.validators.MaxValueValidator(12500, 'Maximum depth may not exceed 12,500m.'), django.core.validators.MinValueValidator(0, 'Depth cannot be less than 0m.')], verbose_name='maximum depth')),
                ('number_of_temperatures', models.IntegerField(blank=True, help_text='Number of temperatures used to determine the estimate.', null=True, verbose_name='number of temperatures')),
                ('temp_method', models.CharField(blank=True, help_text='The method used to obtain temperature values.', max_length=200, verbose_name='temperature method')),
                ('heat_flow_corrected', models.FloatField(blank=True, help_text='The corrected value.', null=True, verbose_name='corrected heat flow [mW m<sup>2</sup>]')),
                ('heat_flow_corrected_uncertainty', models.FloatField(blank=True, help_text='Uncertainty on the corrected value.', null=True, verbose_name='corrected uncertainty [mW m<sup>2</sup>]')),
                ('heat_flow_uncorrected', models.FloatField(blank=True, help_text='The uncorrected value.', null=True, verbose_name='uncorrected heat flow [mW m<sup>2</sup>]')),
                ('heat_flow_uncorrected_uncertainty', models.FloatField(blank=True, help_text='Uncertainty on the uncorrected value.', null=True, verbose_name='uncorrected uncertainty [mW m<sup>2</sup>]')),
                ('gradient_corrected', models.FloatField(blank=True, help_text='The corrected value.', null=True, verbose_name='corrected gradient [mW m<sup>2</sup>]')),
                ('gradient_corrected_uncertainty', models.FloatField(blank=True, help_text='Uncertainty on the corrected value.', null=True, verbose_name='corrected uncertainty [mW m<sup>2</sup>]')),
                ('gradient_uncorrected', models.FloatField(blank=True, help_text='The uncorrected value.', null=True, verbose_name='uncorrected gradient [mW m<sup>2</sup>]')),
                ('gradient_uncorrected_uncertainty', models.FloatField(blank=True, help_text='Uncertainty on the uncorrected value.', null=True, verbose_name='uncorrected uncertainty [mW m<sup>2</sup>]')),
                ('average_conductivity', models.FloatField(blank=True, help_text='Reported thermal conductivity to accompany the heat flow estimate.', null=True, verbose_name='thermal conductivity')),
                ('conductivity_uncertainty', models.FloatField(blank=True, help_text='Uncertainty of the reported thermal conductivity.', null=True, verbose_name='thermal conductivity uncertainty')),
                ('number_of_conductivities', models.FloatField(blank=True, help_text='Number of thermal conductivities from which the reported thermal conductivity was derived.', null=True, verbose_name='number of conductivity measurements')),
                ('conductivity_method', models.CharField(blank=True, help_text='Method used to measure or derive thermal conductivity.', max_length=150, null=True, verbose_name='thermal conductivity method')),
                ('heat_generation', models.FloatField(blank=True, help_text='Average heat generation to accompany the heat flow estimate.', null=True, verbose_name='average heat generation')),
                ('heat_generation_uncertainty', models.FloatField(blank=True, help_text='Uncertainty of the reported heat generation.', null=True, verbose_name='heat generation uncertainty')),
                ('number_of_heat_gen', models.FloatField(blank=True, help_text='Number of heat generation values from which the average heat generation was derived.', null=True, verbose_name='number of heat generation measurements')),
                ('heat_generation_method', models.CharField(blank=True, help_text='Method used to measure or derive heat generation.', max_length=150, null=True, verbose_name='heat generation method')),
                ('global_flag', models.BooleanField(default=None, help_text='Measurement is suitable for use in global modelling.', null=True, verbose_name='global flag')),
                ('global_reason', models.CharField(blank=True, help_text='reason for denoting this measurement as suitable for global modelling', max_length=200, null=True, verbose_name='reason')),
            ],
            options={
                'verbose_name_plural': 'heat flow',
                'db_table': 'heat_flow',
            },
        ),
        migrations.CreateModel(
            name='HeatGeneration',
            fields=[
                ('comment', models.TextField(blank=True, help_text='Information supplied with the measurement either by the original author/researcher or the compiler.', null=True, verbose_name='comment')),
                ('source', models.CharField(blank=True, max_length=50, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sample_name', models.CharField(blank=True, help_text='The reported name of the sample if applicable.', max_length=200, verbose_name='sample name')),
                ('method', models.CharField(blank=True, help_text='The method used to obtain the reported value.', max_length=200, verbose_name='method')),
                ('depth', models.FloatField(blank=True, help_text='The depth at which the measurement was taken (if applicable).', null=True, verbose_name='depth')),
                ('rock_group', models.CharField(blank=True, choices=[('M', 'metamorphic'), ('I', 'igneous'), ('S', 'sedimentary'), ('MI', 'meta-igneous'), ('MS', 'meta-sedimentary')], help_text='The encompassing rock group of the sample.', max_length=2, null=True, verbose_name='rock group')),
                ('rock_origin', models.CharField(blank=True, choices=[('P', 'plutonic'), ('V', 'volcanic')], help_text='The geological origin of the sample.', max_length=2, null=True, verbose_name='rock origin')),
                ('rock_type', models.CharField(blank=True, help_text='The reported rock type.', max_length=100, null=True, verbose_name='rock type')),
                ('age', models.FloatField(blank=True, help_text='The reported age of the sample.', null=True, verbose_name='age')),
                ('age_type', models.CharField(blank=True, help_text='The type of age given.', max_length=200, null=True, verbose_name='age type')),
                ('value', models.FloatField(help_text='The reported value of the sample.', verbose_name='heat generation [&micro;W m<sup>3</sup>]')),
                ('uncertainty', models.FloatField(blank=True, help_text='The uncertainty on the reported value.', null=True, verbose_name='uncertainty [&micro;W m<sup>3</sup>]')),
            ],
            options={
                'verbose_name_plural': 'heat generation',
                'db_table': 'heat_generation',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPublication',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('bib_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('type', models.CharField(blank=True, max_length=100)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('doi', models.CharField(blank=True, max_length=200)),
                ('bibtex', models.TextField(blank=True)),
                ('abstract', models.TextField(blank=True)),
                ('journal', models.CharField(blank=True, max_length=250)),
                ('added', models.DateTimeField(blank=True, editable=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=['id', 'title'])),
                ('source', models.CharField(blank=True, default='User Upload', max_length=100)),
                ('is_verified', models.BooleanField(default=False)),
                ('date_verified', models.DateTimeField(blank=True, null=True)),
                ('uploaded_by', models.CharField(blank=True, max_length=150, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical publication',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('bib_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('type', models.CharField(blank=True, max_length=100)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('doi', models.CharField(blank=True, max_length=200)),
                ('bibtex', models.TextField(blank=True)),
                ('abstract', models.TextField(blank=True)),
                ('journal', models.CharField(blank=True, max_length=250)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=['id', 'title'])),
                ('source', models.CharField(blank=True, default='User Upload', max_length=100)),
                ('is_verified', models.BooleanField(default=False)),
                ('date_verified', models.DateTimeField(blank=True, null=True)),
                ('uploaded_by', models.CharField(blank=True, max_length=150, null=True)),
                ('authors', sortedm2m.fields.SortedManyToManyField(blank=True, help_text=None, related_name='publications', to='thermoglobe.Author')),
            ],
            options={
                'db_table': 'publications',
                'ordering': [django.db.models.expressions.OrderBy(django.db.models.expressions.F('year'), descending=True, nulls_last=True)],
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('site_name', models.CharField(help_text='The name given to the site.', max_length=200, verbose_name='site name')),
                ('latitude', models.FloatField(help_text='Latitude in decimal degrees. WGS84 preferred but not enforced.', validators=[django.core.validators.MaxValueValidator(90), django.core.validators.MinValueValidator(-90)], verbose_name='latitude')),
                ('longitude', models.FloatField(help_text='Longitude in decimal degrees. WGS84 preferred but not enforced.', validators=[django.core.validators.MaxValueValidator(180), django.core.validators.MinValueValidator(-180)], verbose_name='longitude')),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, srid=4326)),
                ('elevation', models.FloatField(blank=True, help_text='Site elevation', null=True, verbose_name='elevation')),
                ('well_depth', models.FloatField(blank=True, help_text='Total depth of the hole in metres.', null=True, validators=[django.core.validators.MaxValueValidator(12500), django.core.validators.MinValueValidator(0)], verbose_name='well depth')),
                ('cruise', models.CharField(blank=True, help_text='For oceanic measurements - the name of the cruise on which the measurements were taken.', max_length=150, null=True, verbose_name='name of cruise')),
                ('seafloor_age', models.FloatField(blank=True, help_text='Total depth of the hole in metres.', null=True, validators=[django.core.validators.MaxValueValidator(90), django.core.validators.MinValueValidator(0)], verbose_name='well depth')),
                ('sediment_thickness', models.FloatField(blank=True, help_text='Sediment thickness at the site.', null=True, verbose_name='calculated sediment thickness')),
                ('sediment_thickness_type', models.CharField(blank=True, help_text='How sediment thickness was determined.', max_length=250, null=True, verbose_name='type of sediment thickness')),
                ('seamount_distance', models.FloatField(blank=True, help_text='Distance in Km to the nearest seamount.', null=True, verbose_name='distance to seamount')),
                ('outcrop_distance', models.FloatField(blank=True, help_text='Distance in Km to the nearest outcrop.', null=True, verbose_name='distance to outcrop')),
                ('crustal_thickness', models.FloatField(blank=True, help_text='Calculated crustal thickness at the site.', null=True, verbose_name='calculated crustal thickness')),
                ('tectonothermal_min', models.CharField(blank=True, max_length=150, null=True, verbose_name='minimum thermo-tectonic age')),
                ('tectonothermal_max', models.CharField(blank=True, max_length=150, null=True, verbose_name='maximum thermo-tectonic age')),
                ('juvenile_age_min', models.CharField(blank=True, max_length=150, null=True, verbose_name='minimum juvenile age')),
                ('juvenile_age_max', models.CharField(blank=True, max_length=150, null=True, verbose_name='minimum juvenile age')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=['site_name', 'latitude', 'longitude'])),
                ('CGG_basin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sites', to='mapping.basin', verbose_name='CGG Robertson Basin')),
            ],
            options={
                'db_table': 'site',
            },
        ),
        migrations.CreateModel(
            name='Upload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('data_type', models.IntegerField(choices=[(0, 'Heat Flow'), (1, 'Thermal Gradient'), (2, 'Temperature'), (3, 'Thermal Conductivity'), (4, 'Heat Generation')], default=0)),
                ('data', models.FileField(upload_to=thermoglobe.models.file_storage_path)),
                ('bibtex', models.TextField(blank=True, null=True)),
                ('date_uploaded', models.DateTimeField(auto_now_add=True)),
                ('imported', models.BooleanField(default=False)),
                ('date_imported', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Upload',
                'ordering': ['-date_uploaded'],
            },
        ),
        migrations.CreateModel(
            name='Temperature',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('comment', models.TextField(blank=True, help_text='Information supplied with the measurement either by the original author/researcher or the compiler.', null=True, verbose_name='comment')),
                ('source', models.CharField(blank=True, max_length=50, null=True)),
                ('value', models.FloatField(help_text='The reported temperature value at the given depth.', verbose_name='temperature [&deg;C]')),
                ('depth', models.FloatField(blank=True, help_text='The reported depth of the value.', null=True, verbose_name='depth [m]')),
                ('method', models.CharField(blank=True, help_text='The method used to measure the temperature.', max_length=200, verbose_name='method')),
                ('lag_time', models.FloatField(blank=True, help_text='The time waited between drilling and measuring temperature.', null=True, verbose_name='lag time')),
                ('is_bottom_of_hole', models.BooleanField(default=False, help_text='A boolean flag denoting the measurement was taken at the bottom of the hole.', verbose_name='is bottom?')),
                ('operator', models.CharField(blank=True, help_text='The operator collecting the measurements', max_length=150, null=True, verbose_name='operator')),
                ('source_id', models.CharField(blank=True, help_text='This is the ID for the measurement used by the original source', max_length=150, null=True, verbose_name='source ID')),
                ('reference', models.ForeignKey(blank=True, help_text='The publication or other reference from which the measurement was reported.', null=True, on_delete=django.db.models.deletion.CASCADE, to='thermoglobe.publication', verbose_name='reference')),
                ('site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='thermoglobe.site', verbose_name='site')),
            ],
            options={
                'verbose_name_plural': 'temperature',
                'db_table': 'temperature',
            },
        ),
        migrations.AddField(
            model_name='site',
            name='bottom_hole_temp',
            field=models.OneToOneField(blank=True, help_text='Temperature at the bottom of the hole.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bottom_hole_temp', to='thermoglobe.temperature', verbose_name='bottom of hole temperature'),
        ),
        migrations.AddField(
            model_name='site',
            name='bottom_water_temp',
            field=models.OneToOneField(blank=True, help_text='Temperature at the bottom of the water column.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bottom_water_temp', to='thermoglobe.temperature', verbose_name='bottom water temperature'),
        ),
        migrations.AddField(
            model_name='site',
            name='continent',
            field=models.ForeignKey(blank=True, help_text='As calculated using the <a href="https://www.arcgis.com/home/item.html?id=a3cb207855b348a297ab85261743351d">ESRI World Continents shapefile</a>.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sites', to='mapping.continent', verbose_name='continent'),
        ),
        migrations.AddField(
            model_name='site',
            name='country',
            field=models.ForeignKey(blank=True, help_text='As calculated using the <a href="http://www.mappinghacks.com/data/">World Borders shapefile</a>.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sites', to='mapping.country', verbose_name='country'),
        ),
        migrations.AddField(
            model_name='site',
            name='political',
            field=models.ForeignKey(blank=True, help_text='As calculated using the Flanders Marine Institute (2018)<a href="http://www.marineregions.org/">Marine and Land Zones</a>. DOI: <a href="https://doi.org/10.14284/403">10.14284/403</a>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sites', to='mapping.political', verbose_name='political region'),
        ),
        migrations.AddField(
            model_name='site',
            name='reference',
            field=models.ManyToManyField(blank=True, help_text='The reference or publication from which the data were sourced. Each site may have multiple references.', related_name='sites', to='thermoglobe.Publication', verbose_name='references'),
        ),
        migrations.AddField(
            model_name='site',
            name='sea',
            field=models.ForeignKey(blank=True, help_text='As calculated using the Flanders Marine Institute (2018)<a href="http://www.marineregions.org/">Oceans and Seas shapefile</a>. DOI: <a href="https://doi.org/10.14284/323">10.14284/323</a>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sites', to='mapping.sea', verbose_name='sea/ocean'),
        ),
        migrations.AddField(
            model_name='site',
            name='surface_temp',
            field=models.OneToOneField(blank=True, help_text='Temperature at the surface. Can be either a top of hole temperature or bottom of water temperature for oceanic measurements', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='surface_temp', to='thermoglobe.temperature', verbose_name='surface temperature'),
        ),
    ]
