# Generated by Django 2.2.24 on 2021-10-20 06:00

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django_extensions.db.fields
import meta.models
import simple_history.models
import sortedm2m.fields
import thermoglobe.models.publications
import thermoglobe.models.upload
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('mapping', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=100)),
                ('first_name', models.CharField(blank=True, max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=['last_name', 'first_name', 'middle_name'])),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='date added to ThermoGlobe')),
            ],
            options={
                'db_table': 'authors',
                'ordering': ['last_name', 'first_name', 'middle_name'],
            },
            bases=(meta.models.ModelMeta, models.Model),
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('bib_id', models.CharField(blank=True, max_length=128, null=True, unique=True)),
                ('type', models.CharField(blank=True, max_length=128)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=512)),
                ('doi', models.CharField(blank=True, max_length=128)),
                ('bibtex', models.TextField(blank=True)),
                ('abstract', models.TextField(blank=True)),
                ('journal', models.CharField(blank=True, max_length=256)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=['id', 'title'])),
                ('source', models.CharField(blank=True, default='User Upload', max_length=128)),
                ('is_verified', models.BooleanField(default=False, verbose_name='verified')),
                ('date_verified', models.DateTimeField(blank=True, null=True)),
                ('file', models.FileField(blank=True, null=True, upload_to=thermoglobe.models.publications.pdf_path, verbose_name='file')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='date added to ThermoGlobe')),
                ('authors', sortedm2m.fields.SortedManyToManyField(blank=True, help_text=None, related_name='publications', to='thermoglobe.Author')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'publications',
                'ordering': [django.db.models.expressions.OrderBy(django.db.models.expressions.F('year'), descending=True, nulls_last=True), 'bib_id'],
            },
            bases=(meta.models.ModelMeta, models.Model),
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('site_name', models.CharField(help_text='The name given to the site.', max_length=200, verbose_name='site name')),
                ('latitude', models.FloatField(db_index=True, help_text='Latitude in decimal degrees. WGS84 preferred but not enforced.', validators=[django.core.validators.MaxValueValidator(90), django.core.validators.MinValueValidator(-90)], verbose_name='latitude')),
                ('longitude', models.FloatField(db_index=True, help_text='Longitude in decimal degrees. WGS84 preferred but not enforced.', validators=[django.core.validators.MaxValueValidator(180), django.core.validators.MinValueValidator(-180)], verbose_name='longitude')),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, srid=4326)),
                ('elevation', models.FloatField(blank=True, help_text='Site elevation', null=True, verbose_name='elevation')),
                ('well_depth', models.FloatField(blank=True, help_text='Total depth of the hole in metres.', null=True, validators=[django.core.validators.MaxValueValidator(12500), django.core.validators.MinValueValidator(0)], verbose_name='well depth')),
                ('cruise', models.CharField(blank=True, help_text='For oceanic measurements - the name of the cruise on which the measurements were taken.', max_length=150, null=True, verbose_name='name of cruise')),
                ('seafloor_age', models.FloatField(blank=True, help_text='Age of the sea floor', null=True, validators=[django.core.validators.MaxValueValidator(220), django.core.validators.MinValueValidator(0)], verbose_name='sea floor age')),
                ('sediment_thickness', models.FloatField(blank=True, help_text='Sediment thickness at the site.', null=True, verbose_name='calculated sediment thickness')),
                ('sediment_thickness_type', models.CharField(blank=True, help_text='How sediment thickness was determined.', max_length=250, null=True, verbose_name='type of sediment thickness')),
                ('seamount_distance', models.FloatField(blank=True, help_text='Distance in Km to the nearest seamount.', null=True, verbose_name='distance to seamount')),
                ('outcrop_distance', models.FloatField(blank=True, help_text='Distance in Km to the nearest outcrop.', null=True, verbose_name='distance to outcrop')),
                ('crustal_thickness', models.FloatField(blank=True, help_text='Calculated crustal thickness at the site.', null=True, verbose_name='calculated crustal thickness')),
                ('bottom_water_temp', models.FloatField(blank=True, help_text='Temperature at the bottom of the water column.', null=True, verbose_name='bottom_water_temperature')),
                ('year_drilled', models.IntegerField(blank=True, null=True, verbose_name='year drilled')),
                ('description', models.TextField(blank=True, null=True, verbose_name='site description')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=['site_name', 'latitude', 'longitude'])),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='date added to ThermoGlobe')),
                ('basin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sites', to='mapping.Basin', verbose_name='basin')),
                ('continent', models.ForeignKey(blank=True, help_text='As calculated using the <a href="https://www.arcgis.com/home/item.html?id=a3cb207855b348a297ab85261743351d">ESRI World Continents shapefile</a>.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sites', to='mapping.Continent', verbose_name='continent')),
                ('country', models.ForeignKey(blank=True, help_text='As calculated using the <a href="http://www.mappinghacks.com/data/">World Borders shapefile</a>.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sites', to='mapping.Country', verbose_name='country')),
                ('political', models.ForeignKey(blank=True, help_text='As calculated using the Flanders Marine Institute (2018)<a href="http://www.marineregions.org/">Marine and Land Zones</a>. DOI: <a href="https://doi.org/10.14284/403">10.14284/403</a>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sites', to='mapping.Political', verbose_name='political region')),
                ('province', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sites', to='mapping.Province', verbose_name='geological province')),
                ('reference', models.ManyToManyField(blank=True, help_text='The reference or publication from which the data were sourced. Each site may have multiple references.', related_name='sites', to='thermoglobe.Publication', verbose_name='references')),
                ('sea', models.ForeignKey(blank=True, help_text='As calculated using the Flanders Marine Institute (2018)<a href="http://www.marineregions.org/">Oceans and Seas shapefile</a>. DOI: <a href="https://doi.org/10.14284/323">10.14284/323</a>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sites', to='mapping.Sea', verbose_name='sea/ocean')),
            ],
            options={
                'db_table': 'site',
                'unique_together': {('site_name', 'latitude', 'longitude')},
            },
            bases=(meta.models.ModelMeta, models.Model),
        ),
        migrations.CreateModel(
            name='Upload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('data_type', models.IntegerField(choices=[(0, 'Heat Flow'), (1, 'Thermal Gradient'), (2, 'Temperature'), (3, 'Thermal Conductivity'), (4, 'Heat Generation')], default=0)),
                ('data', models.FileField(upload_to=thermoglobe.models.upload.file_storage_path)),
                ('bibtex', models.TextField(blank=True, null=True)),
                ('date_uploaded', models.DateTimeField(auto_now_add=True)),
                ('imported', models.BooleanField(default=False)),
                ('date_imported', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Upload',
                'ordering': ['-date_uploaded'],
            },
        ),
        migrations.CreateModel(
            name='Interval',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reliability', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('R', 'R'), ('Z', 'Z')], help_text='Heat flow reliability code', max_length=1, null=True, verbose_name='heat flow reliability')),
                ('tilt', models.FloatField(blank=True, help_text='Angle between vertical and the orientation of the probe.', null=True, validators=[django.core.validators.MaxValueValidator(90), django.core.validators.MinValueValidator(0)], verbose_name='probe tilt')),
                ('depth_min', models.FloatField(blank=True, help_text='Minimum depth of the measurement interval.', null=True, validators=[django.core.validators.MaxValueValidator(12500, 'Maximum depth may not exceed 12,500m.'), django.core.validators.MinValueValidator(0, 'Depth cannot be less than 0m.')], verbose_name='depth min')),
                ('depth_max', models.FloatField(blank=True, help_text='Maximum depth of the measurement interval.', null=True, validators=[django.core.validators.MaxValueValidator(12500, 'Maximum depth may not exceed 12,500m.'), django.core.validators.MinValueValidator(0, 'Depth cannot be less than 0m.')], verbose_name='depth max')),
                ('number_of_temperatures', models.IntegerField(blank=True, help_text='Number of temperatures used to determine the estimate.', null=True, verbose_name='number of temperatures')),
                ('temp_method', models.CharField(blank=True, help_text='The method used to obtain temperature values.', max_length=200, verbose_name='temperature method')),
                ('heat_flow_corrected', models.FloatField(blank=True, help_text='The corrected value.', null=True, verbose_name='corrected heat flow')),
                ('heat_flow_corrected_uncertainty', models.FloatField(blank=True, help_text='Uncertainty on the corrected value.', null=True, verbose_name='corrected uncertainty')),
                ('heat_flow_uncorrected', models.FloatField(blank=True, help_text='The uncorrected value.', null=True, verbose_name='uncorrected heat flow')),
                ('heat_flow_uncorrected_uncertainty', models.FloatField(blank=True, help_text='Uncertainty on the uncorrected value.', null=True, verbose_name='uncorrected uncertainty')),
                ('gradient_corrected', models.FloatField(blank=True, help_text='The corrected value.', null=True, verbose_name='corrected gradient')),
                ('gradient_corrected_uncertainty', models.FloatField(blank=True, help_text='Uncertainty on the corrected value.', null=True, verbose_name='corrected uncertainty')),
                ('gradient_uncorrected', models.FloatField(blank=True, help_text='The uncorrected value.', null=True, verbose_name='uncorrected gradient')),
                ('gradient_uncorrected_uncertainty', models.FloatField(blank=True, help_text='Uncertainty on the uncorrected value.', null=True, verbose_name='uncorrected uncertainty')),
                ('average_conductivity', models.FloatField(blank=True, help_text='Reported thermal conductivity to accompany the heat flow estimate.', null=True, verbose_name='thermal conductivity')),
                ('conductivity_uncertainty', models.FloatField(blank=True, help_text='Uncertainty of the reported thermal conductivity.', null=True, verbose_name='thermal conductivity uncertainty')),
                ('number_of_conductivities', models.FloatField(blank=True, help_text='Number of thermal conductivities from which the reported thermal conductivity was derived.', null=True, verbose_name='number of conductivity measurements')),
                ('conductivity_method', models.CharField(blank=True, help_text='Method used to measure or derive thermal conductivity.', max_length=150, null=True, verbose_name='thermal conductivity method')),
                ('heat_generation', models.FloatField(blank=True, help_text='Average heat generation to accompany the heat flow estimate.', null=True, verbose_name='average heat generation')),
                ('heat_generation_uncertainty', models.FloatField(blank=True, help_text='Uncertainty of the reported heat generation.', null=True, verbose_name='heat generation uncertainty')),
                ('number_of_heat_gen', models.FloatField(blank=True, help_text='Number of heat generation values from which the average heat generation was derived.', null=True, verbose_name='number of heat generation measurements')),
                ('heat_generation_method', models.CharField(blank=True, help_text='Method used to measure or derive heat generation.', max_length=150, null=True, verbose_name='heat generation method')),
                ('comment', models.TextField(blank=True, help_text='Information supplied with the measurement either by the original author/researcher or the compiler.', null=True, verbose_name='comment')),
                ('source', models.CharField(blank=True, max_length=50, null=True)),
                ('global_flag', models.BooleanField(default=False, help_text='Measurement is suitable for use in global modelling.', null=True, verbose_name='global flag')),
                ('global_reason', models.CharField(blank=True, help_text='reason for denoting this measurement as suitable for global modelling', max_length=200, null=True, verbose_name='reason')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='date added to ThermoGlobe')),
                ('global_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='declared_global', to=settings.AUTH_USER_MODEL)),
                ('reference', models.ForeignKey(blank=True, help_text='The publication or other reference from which the measurement was reported.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='intervals', to='thermoglobe.Publication', verbose_name='reference')),
                ('site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='intervals', to='thermoglobe.Site', verbose_name='site')),
            ],
            options={
                'db_table': 'interval',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSite',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('site_name', models.CharField(help_text='The name given to the site.', max_length=200, verbose_name='site name')),
                ('latitude', models.FloatField(db_index=True, help_text='Latitude in decimal degrees. WGS84 preferred but not enforced.', validators=[django.core.validators.MaxValueValidator(90), django.core.validators.MinValueValidator(-90)], verbose_name='latitude')),
                ('longitude', models.FloatField(db_index=True, help_text='Longitude in decimal degrees. WGS84 preferred but not enforced.', validators=[django.core.validators.MaxValueValidator(180), django.core.validators.MinValueValidator(-180)], verbose_name='longitude')),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, srid=4326)),
                ('elevation', models.FloatField(blank=True, help_text='Site elevation', null=True, verbose_name='elevation')),
                ('well_depth', models.FloatField(blank=True, help_text='Total depth of the hole in metres.', null=True, validators=[django.core.validators.MaxValueValidator(12500), django.core.validators.MinValueValidator(0)], verbose_name='well depth')),
                ('cruise', models.CharField(blank=True, help_text='For oceanic measurements - the name of the cruise on which the measurements were taken.', max_length=150, null=True, verbose_name='name of cruise')),
                ('seafloor_age', models.FloatField(blank=True, help_text='Age of the sea floor', null=True, validators=[django.core.validators.MaxValueValidator(220), django.core.validators.MinValueValidator(0)], verbose_name='sea floor age')),
                ('sediment_thickness', models.FloatField(blank=True, help_text='Sediment thickness at the site.', null=True, verbose_name='calculated sediment thickness')),
                ('sediment_thickness_type', models.CharField(blank=True, help_text='How sediment thickness was determined.', max_length=250, null=True, verbose_name='type of sediment thickness')),
                ('seamount_distance', models.FloatField(blank=True, help_text='Distance in Km to the nearest seamount.', null=True, verbose_name='distance to seamount')),
                ('outcrop_distance', models.FloatField(blank=True, help_text='Distance in Km to the nearest outcrop.', null=True, verbose_name='distance to outcrop')),
                ('crustal_thickness', models.FloatField(blank=True, help_text='Calculated crustal thickness at the site.', null=True, verbose_name='calculated crustal thickness')),
                ('bottom_water_temp', models.FloatField(blank=True, help_text='Temperature at the bottom of the water column.', null=True, verbose_name='bottom_water_temperature')),
                ('year_drilled', models.IntegerField(blank=True, null=True, verbose_name='year drilled')),
                ('description', models.TextField(blank=True, null=True, verbose_name='site description')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=['site_name', 'latitude', 'longitude'])),
                ('date_added', models.DateTimeField(blank=True, editable=False, verbose_name='date added to ThermoGlobe')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('basin', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mapping.Basin', verbose_name='basin')),
                ('continent', models.ForeignKey(blank=True, db_constraint=False, help_text='As calculated using the <a href="https://www.arcgis.com/home/item.html?id=a3cb207855b348a297ab85261743351d">ESRI World Continents shapefile</a>.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mapping.Continent', verbose_name='continent')),
                ('country', models.ForeignKey(blank=True, db_constraint=False, help_text='As calculated using the <a href="http://www.mappinghacks.com/data/">World Borders shapefile</a>.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mapping.Country', verbose_name='country')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('political', models.ForeignKey(blank=True, db_constraint=False, help_text='As calculated using the Flanders Marine Institute (2018)<a href="http://www.marineregions.org/">Marine and Land Zones</a>. DOI: <a href="https://doi.org/10.14284/403">10.14284/403</a>', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mapping.Political', verbose_name='political region')),
                ('province', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mapping.Province', verbose_name='geological province')),
                ('sea', models.ForeignKey(blank=True, db_constraint=False, help_text='As calculated using the Flanders Marine Institute (2018)<a href="http://www.marineregions.org/">Oceans and Seas shapefile</a>. DOI: <a href="https://doi.org/10.14284/323">10.14284/323</a>', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mapping.Sea', verbose_name='sea/ocean')),
            ],
            options={
                'verbose_name': 'historical site',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPublication',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('bib_id', models.CharField(blank=True, db_index=True, max_length=128, null=True)),
                ('type', models.CharField(blank=True, max_length=128)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=512)),
                ('doi', models.CharField(blank=True, max_length=128)),
                ('bibtex', models.TextField(blank=True)),
                ('abstract', models.TextField(blank=True)),
                ('journal', models.CharField(blank=True, max_length=256)),
                ('added', models.DateTimeField(blank=True, editable=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=['id', 'title'])),
                ('source', models.CharField(blank=True, default='User Upload', max_length=128)),
                ('is_verified', models.BooleanField(default=False, verbose_name='verified')),
                ('date_verified', models.DateTimeField(blank=True, null=True)),
                ('file', models.TextField(blank=True, max_length=100, null=True, verbose_name='file')),
                ('date_added', models.DateTimeField(blank=True, editable=False, verbose_name='date added to ThermoGlobe')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical publication',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Correction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('climate_flag', models.BooleanField(default=None, null=True, verbose_name='climate corrected')),
                ('climate', models.FloatField(blank=True, help_text='Value of a climatic correction applied to the associated heat flow and thermal gradient estimates.', null=True, verbose_name='value')),
                ('topographic_flag', models.BooleanField(default=None, null=True, verbose_name='topographic corrected')),
                ('topographic', models.FloatField(blank=True, help_text='Value of a topographic correction applied to the associated heat flow and thermal gradient estimates.', null=True, verbose_name='value')),
                ('refraction_flag', models.BooleanField(default=None, null=True, verbose_name='refraction corrected')),
                ('refraction', models.FloatField(blank=True, help_text='Value of a refraction correction applied to the associated heat flow and thermal gradient estimates.', null=True, verbose_name='value')),
                ('sed_erosion_flag', models.BooleanField(default=None, null=True, verbose_name='sedimentation corrected')),
                ('sed_erosion', models.FloatField(blank=True, help_text='Value of a sedimentation correction applied to the associated heat flow and thermal gradient estimates.', null=True, verbose_name='value')),
                ('fluid_flag', models.BooleanField(default=None, null=True, verbose_name='fluid corrected')),
                ('fluid', models.FloatField(blank=True, help_text='Value of a fluid correction applied to the associated heat flow and thermal gradient estimates.', null=True, verbose_name='value')),
                ('bwv_flag', models.BooleanField(default=None, null=True, verbose_name='BWV corrected')),
                ('bwv', models.FloatField(blank=True, help_text='Value of a bottom water variation correction applied to the associated heat flow and thermal gradient estimates.', null=True, verbose_name='value')),
                ('compaction_flag', models.BooleanField(default=None, null=True, verbose_name='compaction corrected')),
                ('compaction', models.FloatField(blank=True, help_text='Value of a compaction correction applied to the associated heat flow and thermal gradient estimates.', null=True, verbose_name='value')),
                ('other_flag', models.BooleanField(default=None, null=True, verbose_name='other')),
                ('other_type', models.CharField(blank=True, help_text='Specifies the type of correction if the type does not belong to one of the other categories.', max_length=100, null=True, verbose_name='type of correction')),
                ('other', models.FloatField(blank=True, help_text='Value of any other correction applied to the associated heat flow and thermal gradient estimates.', null=True, verbose_name='value')),
                ('heatflow', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='corrections', to='thermoglobe.Interval')),
            ],
            options={
                'db_table': 'correction',
            },
        ),
        migrations.CreateModel(
            name='Temperature',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('formation', models.CharField(blank=True, help_text='The name of the sampled geological formation.', max_length=200, verbose_name='formation name')),
                ('depth', models.FloatField(blank=True, help_text='The depth at which the measurement was taken (if applicable).', null=True, verbose_name='depth')),
                ('method', models.CharField(blank=True, help_text='The method used to obtain the reported value.', max_length=200, verbose_name='method')),
                ('operator', models.CharField(blank=True, help_text='The operator collecting the measurements', max_length=150, null=True, verbose_name='operator')),
                ('comment', models.TextField(blank=True, help_text='Information supplied with the measurement either by the original author/researcher or the compiler.', null=True, verbose_name='comment')),
                ('source', models.CharField(blank=True, max_length=50, null=True)),
                ('source_id', models.CharField(blank=True, help_text='This is the ID for the measurement used by the original source', max_length=150, null=True, verbose_name='source ID')),
                ('log_id', models.CharField(blank=True, help_text='This is required for multiple logs to be stored on the same site.', max_length=64, null=True, verbose_name='log specific ID')),
                ('year_logged', models.PositiveIntegerField(blank=True, help_text='Year the measurement was made.', null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2050)], verbose_name='year logged')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='date added to ThermoGlobe')),
                ('temperature', models.FloatField(help_text='The reported temperature in at the given depth.', verbose_name='temperature')),
                ('uncertainty', models.FloatField(blank=True, help_text='Uncertainty on the reported temperature.', null=True, verbose_name='uncertainty')),
                ('circ_time', models.FloatField(blank=True, help_text='Circulation time in hours.', null=True, verbose_name='circulation time')),
                ('lag_time', models.FloatField(blank=True, help_text='Hours between drilling and measuring temperature.', null=True, verbose_name='lag time')),
                ('correction', models.CharField(blank=True, help_text='Applied temperature correction type.', max_length=150, null=True, verbose_name='correction')),
                ('reference', models.ForeignKey(blank=True, help_text='The publication or other reference from which the measurement was reported.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='temperature', to='thermoglobe.Publication', verbose_name='reference')),
                ('site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='temperature', to='thermoglobe.Site', verbose_name='site')),
            ],
            options={
                'verbose_name': 'temperature',
                'verbose_name_plural': 'temperature',
                'db_table': 'temperature',
                'unique_together': {('temperature', 'depth', 'site', 'log_id', 'reference')},
            },
        ),
        migrations.CreateModel(
            name='HeatGeneration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('formation', models.CharField(blank=True, help_text='The name of the sampled geological formation.', max_length=200, verbose_name='formation name')),
                ('depth', models.FloatField(blank=True, help_text='The depth at which the measurement was taken (if applicable).', null=True, verbose_name='depth')),
                ('method', models.CharField(blank=True, help_text='The method used to obtain the reported value.', max_length=200, verbose_name='method')),
                ('operator', models.CharField(blank=True, help_text='The operator collecting the measurements', max_length=150, null=True, verbose_name='operator')),
                ('comment', models.TextField(blank=True, help_text='Information supplied with the measurement either by the original author/researcher or the compiler.', null=True, verbose_name='comment')),
                ('source', models.CharField(blank=True, max_length=50, null=True)),
                ('source_id', models.CharField(blank=True, help_text='This is the ID for the measurement used by the original source', max_length=150, null=True, verbose_name='source ID')),
                ('log_id', models.CharField(blank=True, help_text='This is required for multiple logs to be stored on the same site.', max_length=64, null=True, verbose_name='log specific ID')),
                ('year_logged', models.PositiveIntegerField(blank=True, help_text='Year the measurement was made.', null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2050)], verbose_name='year logged')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='date added to ThermoGlobe')),
                ('rock_type', models.CharField(blank=True, help_text='The reported rock type.', max_length=100, null=True, verbose_name='rock type')),
                ('heat_generation', models.FloatField(help_text='The reported value of the sample.', verbose_name='heat generation')),
                ('uncertainty', models.FloatField(blank=True, help_text='The uncertainty on the reported value.', null=True, verbose_name='uncertainty')),
                ('k_pc', models.FloatField(blank=True, null=True, verbose_name='K (wt%)')),
                ('th_ppm', models.FloatField(blank=True, null=True, verbose_name='Th (ppm)')),
                ('u_ppm', models.FloatField(blank=True, null=True, verbose_name='U (ppm)')),
                ('reference', models.ForeignKey(blank=True, help_text='The publication or other reference from which the measurement was reported.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='heat_generation', to='thermoglobe.Publication', verbose_name='reference')),
                ('site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='heat_generation', to='thermoglobe.Site', verbose_name='site')),
            ],
            options={
                'verbose_name': 'heat generation',
                'verbose_name_plural': 'heat generation',
                'db_table': 'heat_generation',
                'default_related_name': 'heat_generation',
                'unique_together': {('log_id', 'heat_generation', 'k_pc', 'th_ppm', 'u_ppm', 'depth', 'site', 'reference')},
            },
        ),
        migrations.CreateModel(
            name='Conductivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('formation', models.CharField(blank=True, help_text='The name of the sampled geological formation.', max_length=200, verbose_name='formation name')),
                ('depth', models.FloatField(blank=True, help_text='The depth at which the measurement was taken (if applicable).', null=True, verbose_name='depth')),
                ('method', models.CharField(blank=True, help_text='The method used to obtain the reported value.', max_length=200, verbose_name='method')),
                ('operator', models.CharField(blank=True, help_text='The operator collecting the measurements', max_length=150, null=True, verbose_name='operator')),
                ('comment', models.TextField(blank=True, help_text='Information supplied with the measurement either by the original author/researcher or the compiler.', null=True, verbose_name='comment')),
                ('source', models.CharField(blank=True, max_length=50, null=True)),
                ('source_id', models.CharField(blank=True, help_text='This is the ID for the measurement used by the original source', max_length=150, null=True, verbose_name='source ID')),
                ('log_id', models.CharField(blank=True, help_text='This is required for multiple logs to be stored on the same site.', max_length=64, null=True, verbose_name='log specific ID')),
                ('year_logged', models.PositiveIntegerField(blank=True, help_text='Year the measurement was made.', null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2050)], verbose_name='year logged')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='date added to ThermoGlobe')),
                ('sample_name', models.CharField(blank=True, help_text='The reported name of the sample if applicable.', max_length=200, verbose_name='sample name')),
                ('conductivity', models.FloatField(help_text='The reported thermal conductivity in of the sample.', verbose_name='thermal conductivity')),
                ('uncertainty', models.FloatField(blank=True, help_text='The uncertainty on the reported value.', null=True, verbose_name='uncertainty')),
                ('rock_type', models.CharField(blank=True, help_text='The reported rock type.', max_length=100, null=True, verbose_name='rock type')),
                ('sample_length', models.FloatField(blank=True, help_text='Length of the sample.', null=True, verbose_name='sample length')),
                ('sample_width', models.FloatField(blank=True, help_text='Width of the sample.', null=True, verbose_name='sample width')),
                ('sample_diameter', models.FloatField(blank=True, help_text='Diameter of the sample.', null=True, verbose_name='sample diameter')),
                ('sample_thickness', models.FloatField(blank=True, help_text='Thickness of the sample.', null=True, verbose_name='sample thickness')),
                ('orientation', models.FloatField(blank=True, help_text='The angle relative to the foliation or bedding where 0 is along foliation and 90 is perpendicular to foliation. Values can be a floating point number anywhere between 0 and 90.', null=True, validators=[django.core.validators.MaxValueValidator(90), django.core.validators.MinValueValidator(0)], verbose_name='orientation')),
                ('reference', models.ForeignKey(blank=True, help_text='The publication or other reference from which the measurement was reported.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='conductivity', to='thermoglobe.Publication', verbose_name='reference')),
                ('site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='conductivity', to='thermoglobe.Site', verbose_name='site')),
            ],
            options={
                'verbose_name': 'thermal conductivity',
                'verbose_name_plural': 'thermal conductivity',
                'db_table': 'thermal_conductivity',
                'unique_together': {('conductivity', 'depth', 'site', 'log_id', 'reference')},
            },
        ),
    ]
